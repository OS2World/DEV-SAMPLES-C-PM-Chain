

            Chain.* is a FREEWARE program. It is supplied to all free
of charge and responsiblity. Everything contained here is supplied "AS
IS". I do not accept ANY responsiblity for anything that may or may
not happen to anything you have anything to do with because of or not
because of this program. Do what you want with this program, source
or anything else you find here, as long as this disclaimer remains
intact with the program and source.

   On the lighter side, this program is modeled after a Cellular
Automata program I read about in Scientific American in the computer
recreations article. I do not remember what issue, late 89 I think,
but any follower of A.K Dewdney will no doubt reconize this "CHAIN"
program.

   The idea is that a color "eats" another color, thus turning that
color into it's own color. In other words, black may eat white, white
eats red, red eats blue, and finally blue eats black, thus making a
'Food' chain. The color array is randomized in the beginning and the
chain algorithm applied repeatedly. The biggest purpose of the
program is the effect. It looks cool. Sometimes all of one color
takes over, sometimes a stable food chain evolves. Every now and then
something else happens, can you find out??

   Also it was my attempt to make OS/2 do graphics from an array I
have control over. I start with a bit map and have it constantly
update the PM window. I felt it was easier to do window manipulation
in my own array, then update the window with a BITBLT call. Also
faster.

   The only bug I know about is with array sizes that are multiples
of forty. I have no idea why multiples of forty do not work, but the
problem seems to be something in PM, not my program. I have yet to
prove it though, as I am not getting paid to write PM programs, yet.
If you have any ideas, solutions, or questions contact me at the 
Invention Factory BBS, NYC NY.

   In order to start the program, use CONTROL-START. After things
settle down a bit, use CLEAR to re-randomize. Mostly have a
good time. This program also does a good job of demostrating
multi-tasking in OS/2. Open 4 or 8 copies of the program and see how
well your amchine multi-tasks. If you make any improvements I would
like to get a copy. The code also is a good template for other
bit-map ideas in CA or other graphics. I am currently working on a
slow grow fractal program, also found in Sci-Am.


                                     Karl Nicholas
                                     NYC NY.
                                     (212) 836-5673  wrk hrs



